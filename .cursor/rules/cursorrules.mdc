---
description: for the sake of the project
globs: 
---

# Your rule content

**cursorrules**

**Contexte du Projet :**  
Vous devez créer un site web de présentation pour des produits de beauté et de soins capillaires (par exemple, sèche-cheveux, lisseurs, etc.) issus de marques telles que Dyson et GHD. Les informations relatives aux produits (nom, description, prix, images, caractéristiques, etc.) seront extraites par scraping depuis des sites sources (par exemple, beauty-set.com) et stockées dans une base de données. Le site devra afficher ces données de manière dynamique et interactive.

**Objectifs du Projet :**

-   **Extraction des données :** Récupérer les informations produits par scraping (une fois ou à intervalles ponctuels) et les importer dans l’application.
-   **Stockage et gestion :** Enregistrer les données scrappées dans une base de données relationnelle (par exemple, MySQL ou PostgreSQL) en utilisant un schéma de données adapté.
-   **Affichage dynamique :** Présenter les données sur le site de manière interactive, en permettant par exemple le filtrage ou le tri des produits.
-   **Déploiement rapide :** Développer et déployer rapidement le site, sachant que vous êtes le seul développeur sur ce projet.

**Technologie Requise – La TALL Stack :**

-   **Laravel :** Pour le back-end, la gestion des routes, la logique métier et l’accès à la base de données.
-   **Livewire :** Pour créer des composants réactifs en PHP et gérer les interactions sans avoir à écrire beaucoup de JavaScript.
-   **Alpine.js :** Pour ajouter des comportements JavaScript légers directement dans le front-end (par exemple, pour gérer des filtres ou des modales).
-   **Tailwind CSS :** Pour la mise en forme, la création d’interfaces modernes et responsives.

**Plan du Projet :**

1. **Préparation de l’Environnement de Développement :**

    - Installer PHP (version 8.2 ou supérieure) et Composer.
    - Vérifier les installations avec `php -v` et `composer -v`.
    - Créer un nouveau projet Laravel en utilisant la commande :
        lua
        Copier
        `composer create-project --prefer-dist laravel/laravel beautyset`
    - Configurer le fichier `.env` (clé d’application, configuration de la base de données).

2. **Installation et Configuration de la TALL Stack :**

    - **Livewire :**
        - Installer via Composer :
            bash
            Copier
            `composer require livewire/livewire`
        - Inclure les directives dans le layout principal (par exemple, ajouter `<livewire:styles />` dans le `<head>` et `<livewire:scripts />` juste avant la fermeture du `<body>`).
    - **Alpine.js :**
        - Ajouter via CDN dans le layout, par exemple :
            html
            Copier
            `<script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>`
    - **Tailwind CSS :**
        - Installer Tailwind CSS avec PostCSS et Autoprefixer :
            csharp
            Copier
            `npm install -D tailwindcss postcss autoprefixer npx tailwindcss init -p`
        - Configurer le fichier `tailwind.config.js` et importer Tailwind dans le fichier CSS principal.

3. **Conception de la Base de Données et Création du Modèle :**

    - Créer une migration pour la table `products` avec les champs suivants :
        - `id` (clé primaire)
        - `nom` (string)
        - `description` (text, nullable)
        - `prix` (decimal)
        - `image_url` (string, nullable)
        - `marque` (string)
        - `caracteristiques` (json, nullable)
    - Exécuter la migration pour créer la table.
    - Créer le modèle `Product` dans `app/Models/Product.php`.

4. **Mise en Place du Scraping :**

    - Créer une commande Artisan (par exemple, `ScrapeProducts`) pour automatiser le scraping.
    - Utiliser **GuzzleHTTP** pour récupérer le HTML des pages cibles.
    - Utiliser **Symfony DomCrawler** (ou une autre bibliothèque de parsing) pour extraire les données (nom, description, prix, image, marque, caractéristiques).
    - Enregistrer les données extraites dans la table `products` via Eloquent.
    - Vérifier que les données sont correctement stockées dans la base.

5. **Développement de l’Interface Utilisateur avec Livewire :**

    - Créer un composant Livewire (par exemple, `ProductsList`) pour afficher la liste des produits.
    - Dans ce composant, récupérer les produits depuis la base de données et les transmettre à la vue.
    - Créer la vue Livewire (`products-list.blade.php`) en utilisant Tailwind CSS pour styliser l’affichage.
    - Ajouter des interactions légères avec Alpine.js si nécessaire (par exemple, pour des filtres ou des modales).

6. **Tests et Déploiement :**

    - Tester le site en local avec `php artisan serve`.
    - Vérifier que le scraping fonctionne et que les produits s’affichent correctement.
    - Préparer le déploiement sur un environnement de production (hébergement compatible avec PHP et Laravel).

**Consignes pour l’Assistance par l’IA :**

-   **Ne génère pas de code complet immédiatement.** Attends que je demande une étape précise ou que je rencontre un blocage.
-   **Fournis des liens de documentation et des ressources utiles** lorsque c’est nécessaire.
-   **Guide-moi étape par étape** en proposant des pistes de recherche et des explications claires adaptées à mon niveau de débutant en Laravel et PHP.
-   **Fais preuve de pédagogie :** Explique chaque étape et ne prends pas tout pour acquis
